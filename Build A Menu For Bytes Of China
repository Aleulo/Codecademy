create table restaurant (
  id integer primary key,
  name varchar(50),
  description varchar(100),
  rating decimal,
  telephone char(10),
  hours varchar(100)
);

create table address (
  id integer primary key,
  street_number varchar(10),
  street_name varchar(20),
  city varchar(20),
  state varchar(15),
  google_map_link varchar(50),
  restaurant_id integer references restaurant(id) unique
);

-- Create the category table
create table category (
  id varchar(2) primary key,
  name varchar(50),
  description varchar(200)
);

-- Create the dish table
create table dish (
  id integer primary key,
  name varchar(50),
  description varchar(200),
  hot_or_not boolean
);

-- Create the categories_dishes table with foreign key references
create table categories_dishes (
  category_id varchar(2) references category(id),
  dish_id integer references dish(id),
  primary key (category_id, dish_id),
  price money
);



create table review (
  id integer primary key,
  review decimal,
  description text,
  date date,
  restaurant_id integer references restaurant(id)
);

/* 
 *--------------------------------------------
 Insert values for restaurant
 *--------------------------------------------
 */
INSERT INTO restaurant VALUES (
  1,
  'Bytes of China',
  'Delectable Chinese Cuisine',
  3.9,
  '6175551212',
  'Mon - Fri 9:00 am to 9:00 pm, Weekends 10:00 am to 11:00 pm'
);

/* 
 *--------------------------------------------
 Insert values for address
 *--------------------------------------------
 */
INSERT INTO address VALUES (
  1,
  '2020',
  'Busy Street',
  'Chinatown',
  'MA',
  'http://bit.ly/BytesOfChina',
  1
);

/* 
 *--------------------------------------------
 Insert values for review
 *--------------------------------------------
 */
INSERT INTO review VALUES (
  1,
  5.0,
  'Would love to host another birthday party at Bytes of China!',
  '05-22-2020',
  1
);

INSERT INTO review VALUES (
  2,
  4.5,
  'Other than a small mix-up, I would give it a 5.0!',
  '04-01-2020',
  1
);

INSERT INTO review VALUES (
  3,
  3.9,
  'A reasonable place to eat for lunch, if you are in a rush!',
  '03-15-2020',
  1
);

/* 
 *--------------------------------------------
 Insert values for category
 *--------------------------------------------
 */
INSERT INTO category VALUES (
  'C',
  'Chicken',
  null
);

INSERT INTO category VALUES (
  'LS',
  'Luncheon Specials',
  'Served with Hot and Sour Soup or Egg Drop Soup and Fried or Steamed Rice  between 11:00 am and 3:00 pm from Monday to Friday.'
);

INSERT INTO category VALUES (
  'HS',
  'House Specials',
  null
);

/* 
 *--------------------------------------------
 Insert values for dish
 *--------------------------------------------
 */
INSERT INTO dish VALUES (
  1,
  'Chicken with Broccoli',
  'Diced chicken stir-fried with succulent broccoli florets',
  false
);

INSERT INTO dish VALUES (
  2,
  'Sweet and Sour Chicken',
  'Marinated chicken with tangy sweet and sour sauce together with pineapples and green peppers',
  false
);

INSERT INTO dish VALUES (
  3,
  'Chicken Wings',
  'Finger-licking mouth-watering entree to spice up any lunch or dinner',
  true
);

INSERT INTO dish VALUES (
  4,
  'Beef with Garlic Sauce',
  'Sliced beef steak marinated in garlic sauce for that tangy flavor',
  true
);

INSERT INTO dish VALUES (
  5,
  'Fresh Mushroom with Snow Peapods and Baby Corns',
  'Colorful entree perfect for vegetarians and mushroom lovers',
  false
);

INSERT INTO dish VALUES (
  6,
  'Sesame Chicken',
  'Crispy chunks of chicken flavored with savory sesame sauce',
  false
);

INSERT INTO dish VALUES (
  7,
  'Special Minced Chicken',
  'Marinated chicken breast sauteed with colorful vegetables topped with pine nuts and shredded lettuce.',
  false
);

INSERT INTO dish VALUES (
  8,
  'Hunan Special Half & Half',
  'Shredded beef in Peking sauce and shredded chicken in garlic sauce',
  true
);

/*
 *--------------------------------------------
 Insert valus for cross-reference table, categories_dishes
 *--------------------------------------------
 */
INSERT INTO categories_dishes VALUES (
  'C',
  1,
  6.95
);

INSERT INTO categories_dishes VALUES (
  'C',
  3,
  6.95
);

INSERT INTO categories_dishes VALUES (
  'LS',
  1,
  8.95
);

INSERT INTO categories_dishes VALUES (
  'LS',
  4,
  8.95
);

INSERT INTO categories_dishes VALUES (
  'LS',
  5,
  8.95
);

INSERT INTO categories_dishes VALUES (
  'HS',
  6,
  15.95
);

INSERT INTO categories_dishes VALUES (
  'HS',
  7,
  16.95
);

INSERT INTO categories_dishes VALUES (
  'HS',
  8,
  17.95
);

/*Once you have successfully imported the sample data in projectdata.sql, you can start making queries to the database. The SELECT, AS, FROM, WHERE, ORDER BY, HAVING and GROUP BY keywords will be useful here as well as a couple of functions.

In script.sql. Type in a query that displays the restaurant name, its address (street number and name) and telephone number. Then, click SAVE to run the query.*/

select restaurant.name, address.street_number, address.street_name, address.city, address.state, restaurant.telephone from restaurant
join address 
on restaurant.id = address.restaurant_id; 

--write a query to get the best rating the restaurant ever received. Display the rating as best_rating.
select max(review) as rating from review;

--Write a query to display a dish name, its price and category sorted by the dish name.
select dish.name as dish_name, categories_dishes.price as price, category.name as category 
from dish
join categories_dishes
on dish.id = categories_dishes.dish_id
join category 
on categories_dishes.category_id = category.id
order by dish.name;

--Instead of sorting the results by dish name, type in a new query to display the results as follows, sorted by category name. 
select category.name as category , dish.name as dish_name, categories_dishes.price as price
from category
join categories_dishes
on category.id = categories_dishes.category_id
join dish
on categories_dishes.dish_id = dish.id;

--type a query in script.sql that displays all the spicy dishes, their prices and category. T
select dish.name as spicy_dish_name, categories_dishes.price as price, category.name as category 
from dish
join categories_dishes
on dish.id = categories_dishes.dish_id
join category 
on categories_dishes.category_id = category.id
where dish.hot_or_not = true;

/*In a complete menu, there will be dishes that belong to more than one category. In our sample menu, only Chicken with Brocolli is assigned to two different categories - Luncheon Specials and Chicken. How do we query the database to find dishes that span multiple categories?

We could use a database function, COUNT(column_name) to help us. For instance if we have a table whose non-primary key column appears multiple times in results, we can count how many times the row appears.

Write a query that displays the dish_id and COUNT(dish_id) as dish_count from the categories_dishes table. When we are displaying dish_id along with an aggregate function such as COUNT(), we have to also add a GROUP BY clause which includes dish_id.
*/
select dish_id, dish.name, count(dish_id) as dish_count 
from categories_dishes
join dish
on categories_dishes.dish_id = dish.id
group by dish_id, dish.name
having count(dish_id) > 1;
--same as previous one
select dish_id, dish.name, count(dish_id) as dish_count 
from categories_dishes, dish
group by dish_id, dish.name, dish.id
having count(dish_id) > 1 and categories_dishes.dish_id = dish.id;

/*Our last task is an improvement on Task 11 which was to display the highest rating from the review table using an aggregate function, MAX(column_name). Since the result returned only one column, it is not very informative.

| best_rating |————- | 5.0 |(1 row)

It would be better if we can also see the actual review itself. Write a query that displays the best rating as best_rating and the description too. In order to do this correctly, we need to have a nested query or subquery. We would place this query in the WHERE clause.
*/
SELECT review as best_rating, description
FROM review
WHERE  review = ( SELECT MAX(review) from review );

